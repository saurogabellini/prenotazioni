@page "/prenotazioni"
@using MedicoPrenotazioni.Models
@using MedicoPrenotazioni.Services
@inject IPrenotazioneService PrenotazioneService
@inject IOperatoreService OperatoreService
@inject IServizioService ServizioService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Gestione Prenotazioni</h3>

<div class="row mb-3">
    <div class="col">
        <a href="/prenotazioni/create" class="btn btn-primary">
            <i class="oi oi-plus"></i> Nuova Prenotazione
        </a>
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-3">
        <div class="form-group">
            <label for="filtroOperatore">Filtra per Operatore</label>
            <select id="filtroOperatore" class="form-control" @onchange="FiltroOperatoreChanged">
                <option value="0">Tutti gli operatori</option>
                @if (operatori != null)
                {
                    @foreach (var operatore in operatori)
                    {
                        <option value="@operatore.Id">@operatore.NomeCompleto</option>
                    }
                }
            </select>
        </div>
    </div>
    <div class="col-md-3">
        <div class="form-group">
            <label for="filtroServizio">Filtra per Servizio</label>
            <select id="filtroServizio" class="form-control" @onchange="FiltroServizioChanged">
                <option value="0">Tutti i servizi</option>
                @if (servizi != null)
                {
                    @foreach (var servizio in servizi)
                    {
                        <option value="@servizio.Id">@servizio.Nome</option>
                    }
                }
            </select>
        </div>
    </div>
    <div class="col-md-3">
        <div class="form-group">
            <label for="filtroData">Filtra per Data</label>
            <input type="date" id="filtroData" class="form-control" @onchange="FiltroDataChanged" />
        </div>
    </div>
    <div class="col-md-3">
        <div class="form-group">
            <label for="filtroCliente">Filtra per Cliente</label>
            <div class="input-group">
                <input type="text" id="filtroCliente" class="form-control" @bind="filtroCliente" placeholder="Cognome cliente" />
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" @onclick="FiltroClienteChanged">
                        <i class="oi oi-magnifying-glass"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@if (prenotazioni == null)
{
    <p><em>Caricamento in corso...</em></p>
}
else if (!prenotazioniFiltrate.Any())
{
    <div class="alert alert-info">
        Non ci sono prenotazioni che corrispondono ai criteri di ricerca.
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Data</th>
                    <th>Orario</th>
                    <th>Cliente</th>
                    <th>Operatore</th>
                    <th>Servizio</th>
                    <th>Stato</th>
                    <th>Azioni</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var prenotazione in prenotazioniFiltrate)
                {
                    <tr>
                        <td>@prenotazione.Data.ToString("dd/MM/yyyy")</td>
                        <td>@prenotazione.OraInizio.ToString(@"hh\:mm") - @prenotazione.OraFine.ToString(@"hh\:mm")</td>
                        <td>@prenotazione.NomeCompletoCliente</td>
                        <td>@GetNomeOperatore(prenotazione.OperatoreId)</td>
                        <td>@GetNomeServizio(prenotazione.ServizioId)</td>
                        <td>
                            @switch (prenotazione.Stato)
                            {
                                case StatoPrenotazione.Prenotata:
                                    <span class="badge bg-primary">Prenotata</span>
                                    break;
                                case StatoPrenotazione.Confermata:
                                    <span class="badge bg-success">Confermata</span>
                                    break;
                                case StatoPrenotazione.Completata:
                                    <span class="badge bg-info">Completata</span>
                                    break;
                                case StatoPrenotazione.Annullata:
                                    <span class="badge bg-danger">Annullata</span>
                                    break;
                            }
                        </td>
                        <td>
                            <a href="/prenotazioni/edit/@prenotazione.Id" class="btn btn-sm btn-primary">
                                <i class="oi oi-pencil"></i> Modifica
                            </a>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeletePrenotazione(prenotazione.Id)">
                                <i class="oi oi-trash"></i> Elimina
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Prenotazione>? prenotazioni;
    private List<Prenotazione>? prenotazioniFiltrate;
    private List<Operatore>? operatori;
    private List<Servizio>? servizi;
    private int filtroOperatoreId = 0;
    private int filtroServizioId = 0;
    private DateTime? filtroData = null;
    private string filtroCliente = "";

    protected override async Task OnInitializedAsync()
    {
        operatori = await OperatoreService.GetOperatoriAsync();
        servizi = await ServizioService.GetServiziAsync();
        await CaricaPrenotazioni();
    }

    private async Task CaricaPrenotazioni()
    {
        prenotazioni = await PrenotazioneService.GetAllPrenotazioniAsync();
        prenotazioniFiltrate = prenotazioni;
        ApplicaFiltri();
    }

    private void ApplicaFiltri()
    {
        if (prenotazioni == null)
            return;
            
        prenotazioniFiltrate = prenotazioni;

        if (filtroOperatoreId > 0)
        {
            prenotazioniFiltrate = prenotazioniFiltrate.Where(p => p.OperatoreId == filtroOperatoreId).ToList();
        }

        if (filtroServizioId > 0)
        {
            prenotazioniFiltrate = prenotazioniFiltrate.Where(p => p.ServizioId == filtroServizioId).ToList();
        }

        if (filtroData.HasValue)
        {
            prenotazioniFiltrate = prenotazioniFiltrate.Where(p => p.Data.Date == filtroData.Value.Date).ToList();
        }

        if (!string.IsNullOrWhiteSpace(filtroCliente))
        {
            prenotazioniFiltrate = prenotazioniFiltrate.Where(p => 
                p.CognomeCliente.Contains(filtroCliente, StringComparison.OrdinalIgnoreCase) || 
                p.NomeCliente.Contains(filtroCliente, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    private void FiltroOperatoreChanged(ChangeEventArgs e)
    {
        if (e.Value != null && int.TryParse(e.Value.ToString(), out int operatoreId))
        {
            filtroOperatoreId = operatoreId;
            ApplicaFiltri();
        }
    }

    private void FiltroServizioChanged(ChangeEventArgs e)
    {
        if (e.Value != null && int.TryParse(e.Value.ToString(), out int servizioId))
        {
            filtroServizioId = servizioId;
            ApplicaFiltri();
        }
    }

    private void FiltroDataChanged(ChangeEventArgs e)
    {
        if (e.Value != null && DateTime.TryParse(e.Value.ToString(), out DateTime data))
        {
            filtroData = data;
        }
        else
        {
            filtroData = null;
        }
        ApplicaFiltri();
    }

    private void FiltroClienteChanged()
    {
        ApplicaFiltri();
    }

    private string GetNomeOperatore(int operatoreId)
    {
        var operatore = operatori?.FirstOrDefault(o => o.Id == operatoreId);
        return operatore != null ? operatore.NomeCompleto : "N/A";
    }

    private string GetNomeServizio(int servizioId)
    {
        var servizio = servizi?.FirstOrDefault(s => s.Id == servizioId);
        return servizio != null ? servizio.Nome : "N/A";
    }

    private async Task DeletePrenotazione(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Sei sicuro di voler eliminare questa prenotazione?"))
        {
            await PrenotazioneService.DeletePrenotazioneAsync(id);
            await CaricaPrenotazioni();
        }
    }
}
