// <auto-generated />
using System;
using MedicoPrenotazioni.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicoPrenotazioni.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250331131528_NonDisponibilita")]
    partial class NonDisponibilita
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicoPrenotazioni.Models.Operatore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Attivo")
                        .HasColumnType("bit");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Specializzazione")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Operatori");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Attivo = true,
                            Cognome = "Rossi",
                            Email = "mario.rossi@esempio.it",
                            Nome = "Mario",
                            Note = "Primario del reparto di cardiologia",
                            Specializzazione = "Cardiologia",
                            Telefono = "3331234567"
                        },
                        new
                        {
                            Id = 2,
                            Attivo = true,
                            Cognome = "Bianchi",
                            Email = "laura.bianchi@esempio.it",
                            Nome = "Laura",
                            Note = "Specialista in dermatologia pediatrica",
                            Specializzazione = "Dermatologia",
                            Telefono = "3339876543"
                        },
                        new
                        {
                            Id = 3,
                            Attivo = true,
                            Cognome = "Verdi",
                            Email = "giuseppe.verdi@esempio.it",
                            Nome = "Giuseppe",
                            Note = "Specialista in traumatologia sportiva",
                            Specializzazione = "Ortopedia",
                            Telefono = "3351234567"
                        });
                });

            modelBuilder.Entity("MedicoPrenotazioni.Models.Prenotazione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CognomeCliente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataModifica")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailCliente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeCliente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("OperatoreId")
                        .HasColumnType("int");

                    b.Property<int>("OperatoreId1")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("OraFine")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("OraInizio")
                        .HasColumnType("time");

                    b.Property<int>("ServizioId")
                        .HasColumnType("int");

                    b.Property<int>("ServizioId1")
                        .HasColumnType("int");

                    b.Property<int>("Stato")
                        .HasColumnType("int");

                    b.Property<string>("TelefonoCliente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OperatoreId");

                    b.HasIndex("OperatoreId1");

                    b.HasIndex("ServizioId");

                    b.HasIndex("ServizioId1");

                    b.ToTable("Prenotazioni");
                });

            modelBuilder.Entity("MedicoPrenotazioni.Models.Servizio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Attivo")
                        .HasColumnType("bit");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DurataDefaultMinuti")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Prezzo")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Servizi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Attivo = true,
                            Descrizione = "Visita specialistica con elettrocardiogramma",
                            DurataDefaultMinuti = 30,
                            Nome = "Visita Cardiologica",
                            Note = "Portare eventuali esami precedenti",
                            Prezzo = 120.00m
                        },
                        new
                        {
                            Id = 2,
                            Attivo = true,
                            Descrizione = "Controllo nei e problemi della pelle",
                            DurataDefaultMinuti = 30,
                            Nome = "Visita Dermatologica",
                            Note = "Evitare creme o trucchi prima della visita",
                            Prezzo = 100.00m
                        },
                        new
                        {
                            Id = 3,
                            Attivo = true,
                            Descrizione = "Valutazione problemi articolari e muscolari",
                            DurataDefaultMinuti = 45,
                            Nome = "Visita Ortopedica",
                            Note = "Portare eventuali radiografie o risonanze",
                            Prezzo = 110.00m
                        });
                });

            modelBuilder.Entity("MedicoPrenotazioni.Models.SlotDisponibilita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Attivo")
                        .HasColumnType("bit");

                    b.Property<int>("DurataMinuti")
                        .HasColumnType("int");

                    b.Property<int>("Giorno")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OperatoreId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("OraFine")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("OraInizio")
                        .HasColumnType("time");

                    b.Property<int>("ServizioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServizioId");

                    b.HasIndex("OperatoreId", "ServizioId", "Giorno");

                    b.ToTable("SlotDisponibilita");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Attivo = true,
                            DurataMinuti = 30,
                            Giorno = 1,
                            Note = "Solo su appuntamento",
                            OperatoreId = 1,
                            OraFine = new TimeSpan(0, 12, 0, 0, 0),
                            OraInizio = new TimeSpan(0, 9, 0, 0, 0),
                            ServizioId = 1
                        },
                        new
                        {
                            Id = 2,
                            Attivo = true,
                            DurataMinuti = 30,
                            Giorno = 3,
                            Note = "Solo su appuntamento",
                            OperatoreId = 1,
                            OraFine = new TimeSpan(0, 12, 0, 0, 0),
                            OraInizio = new TimeSpan(0, 9, 0, 0, 0),
                            ServizioId = 1
                        },
                        new
                        {
                            Id = 3,
                            Attivo = true,
                            DurataMinuti = 30,
                            Giorno = 2,
                            Note = "Disponibile anche per urgenze",
                            OperatoreId = 2,
                            OraFine = new TimeSpan(0, 18, 0, 0, 0),
                            OraInizio = new TimeSpan(0, 14, 0, 0, 0),
                            ServizioId = 2
                        },
                        new
                        {
                            Id = 4,
                            Attivo = true,
                            DurataMinuti = 30,
                            Giorno = 4,
                            Note = "Disponibile anche per urgenze",
                            OperatoreId = 2,
                            OraFine = new TimeSpan(0, 18, 0, 0, 0),
                            OraInizio = new TimeSpan(0, 14, 0, 0, 0),
                            ServizioId = 2
                        },
                        new
                        {
                            Id = 5,
                            Attivo = true,
                            DurataMinuti = 45,
                            Giorno = 5,
                            Note = "Pausa pranzo 13:00-14:00",
                            OperatoreId = 3,
                            OraFine = new TimeSpan(0, 18, 0, 0, 0),
                            OraInizio = new TimeSpan(0, 9, 0, 0, 0),
                            ServizioId = 3
                        });
                });

            modelBuilder.Entity("MedicoPrenotazioni.Models.Prenotazione", b =>
                {
                    b.HasOne("MedicoPrenotazioni.Models.Operatore", null)
                        .WithMany()
                        .HasForeignKey("OperatoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicoPrenotazioni.Models.Operatore", "Operatore")
                        .WithMany()
                        .HasForeignKey("OperatoreId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicoPrenotazioni.Models.Servizio", null)
                        .WithMany()
                        .HasForeignKey("ServizioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicoPrenotazioni.Models.Servizio", "Servizio")
                        .WithMany()
                        .HasForeignKey("ServizioId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operatore");

                    b.Navigation("Servizio");
                });

            modelBuilder.Entity("MedicoPrenotazioni.Models.SlotDisponibilita", b =>
                {
                    b.HasOne("MedicoPrenotazioni.Models.Operatore", "Operatore")
                        .WithMany("SlotDisponibilita")
                        .HasForeignKey("OperatoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicoPrenotazioni.Models.Servizio", "Servizio")
                        .WithMany("SlotDisponibilita")
                        .HasForeignKey("ServizioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operatore");

                    b.Navigation("Servizio");
                });

            modelBuilder.Entity("MedicoPrenotazioni.Models.Operatore", b =>
                {
                    b.Navigation("SlotDisponibilita");
                });

            modelBuilder.Entity("MedicoPrenotazioni.Models.Servizio", b =>
                {
                    b.Navigation("SlotDisponibilita");
                });
#pragma warning restore 612, 618
        }
    }
}
